class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}
    def rate_hw_student(self, lecturer, course, grade):
        if isinstance(lecturer, Lecturer) and course in lecturer.courses_attached and course in self.courses_in_progress:
            if course in lecturer.grades:
                lecturer.grades[course] += [grade]
            else:
                lecturer.grades[course] = [grade]
        else:
            return 'Ошибка'
    def average_grades(self):
        for i, e in self.grades.items():
            self.average_grade = sum(e) / len(e)
            return self.average_grade
    def _lt_(self, student):
        return self.average_grades() < student.average_grades()
    def __str__(self):
        return (f'Имя: {self.name} \n'
                f'Фамилия: {self.surname} \n'
                f'Средняя оценка за домашние задания: {self.average_grades()} \n'
                f'Курсы в процессе изучения: {", ".join(self.courses_in_progress)} \n'
                f'Завершенные курсы: {", ".join(self.finished_courses)}')
        
class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []

class Lecturer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.grades = {}
    def average_grades(self):
        for i, e in self.grades.items():
            self.average_grade = sum(e) / len(e)
            return self.average_grade
    def _lt_(self, lecturer):
        return self.average_grades() < lecturer.average_grades()        
    def __str__(self):
        return(f'Имя: {self.name}'
               f'Фамилия: {self.surname}'
               f'Средняя оценка за лекции: {self.average_grades()}')

class Reviewer(Mentor):
    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course] += [grade]
            else:
                student.grades[course] = [grade]
        else:
            return 'Ошибка'
    def __str__(self):
        return (f'Имя: {self.name}'
                f'Фамилия: {self.surname}')

def average_grades_students(students, student):
    grades_students = 0
    average_grades_students = 0
    for i in students:
        if isinstance(i, Student):
            for e, en in i.grades.items():
                grades_students += sum(en) / len(en)
        else:
            return (f'errooooor')
    average_grades_students += grades_students / len(students)
    return (f'Средняя оценка за курс: {e} - {average_grades_students}')

def average_grades_lecturers(lecturers, lecturer):
    grades_lecturer = 0
    average_grades_lecturer = 0
    for i in lecturers:
        if isinstance(i, Lecturer):
            for e, en in i.grades.items():
                grades_lecturer += sum(en) / len(en)
        else:
            return (f'errooooor')
    average_grades_lecturer += grades_lecturer / len(lecturers)
    return (f'Средняя оценка за курс: {e} - {average_grades_lecturer}')

best_student = Student('Ruoy', 'Eman', 'your_gender')
best_student.courses_in_progress += ['Python']

best_student1 = Student('Ruoy', 'Eman', 'your_gender')
best_student1.courses_in_progress += ['Python']
 
cool_reviewer = Reviewer('Some', 'Buddy')
cool_reviewer.courses_attached += ['Python']

lecturer1 = Lecturer('Eva', 'Martin')
lecturer1.courses_attached += ['Python']
lecturer2 = Lecturer('Dan', 'Martin')
lecturer2.courses_attached += ['Python']
lecturer3 = Lecturer('Nat', 'Martin')
lecturer3.courses_attached += ['Python']

best_student.rate_hw_student(lecturer1, 'Python', 10)
best_student.rate_hw_student(lecturer1, 'Python', 7)
best_student1.rate_hw_student(lecturer2, 'Python', 7)
best_student1.rate_hw_student(lecturer3, 'Python', 9)
 
cool_reviewer.rate_hw(best_student, 'Python', 10)
cool_reviewer.rate_hw(best_student, 'Python', 10)
cool_reviewer.rate_hw(best_student, 'Python', 10)

cool_reviewer.rate_hw(best_student1, 'Python', 8)
cool_reviewer.rate_hw(best_student1, 'Python', 10)
cool_reviewer.rate_hw(best_student1, 'Python', 10)

students = [best_student1, best_student]
lecturers = [lecturer1, lecturer2, lecturer3]

print(Student.__str__(best_student1))
print(best_student1.average_grades() < best_student.average_grades())
print(average_grades_students(students, best_student1))
print(average_grades_lecturers(lecturers, lecturer1))